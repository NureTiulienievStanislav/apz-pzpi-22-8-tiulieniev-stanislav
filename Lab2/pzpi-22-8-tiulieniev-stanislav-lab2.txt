Міністерство освіти та науки України
Харківський національний університет
радіоелектроніки


Кафедра ПІ


Звіт
З лабораторної роботи 2
з дисципліни «Архітектура програмного забезпечення»
на тему: «Розробка програмної архітектури, створення та
відлагодження програмного коду серверної частини
програмної системи»




Виконав:	Перевірив:
ст. гр. ПЗПІ-22-8	ст. викладач Сокорчук І.П.
Тюлєнєв С.О.	 



Харків 2025



Мета роботи:
Потрібно розробити серверну / back-end частину програмної системи.

Історія змін:
№	Дата	Версія	Опис змін	Автор
1	21.05.2025	0.1	Створено структуру звіту	Тюлєнєв Станіслав
2	22.05.2025	0.2	Додано діаграми та інженерні рішення	Тюлєнєв Станіслав
3	23.05.2025	1.0	Фіналізовано звіт	Тюлєнєв Станіслав

Опис виконаної роботи:
Було створено архітектуру та реалізовано всі ключові компоненти програмної системи TrackWay. Програмна система TrackWay побудована з урахуванням багаторівневої архітектури, яка включає презентаційний рівень (веб-інтерфейс і мобільний додаток), серверну частину (REST API на Node.js) та базу даних (MongoDB).
ER-модель системи базується на трьох основних сутностях: користувачі (users), транспортні засоби (vehicles) та маршрути (routes). Користувач може мати кілька автомобілів, а кожен автомобіль може бути пов’язаний з одним або кількома маршрутами. Структура реалізована через Mongoose-схеми з використанням ObjectId-посилань.
Комунікація між компонентами програмної системи реалізована через REST API. Передбачено такі запити: авторизація (POST /login), реєстрація (POST /register), додавання авто (POST /vehicles), перегляд списку (GET /vehicles), видалення (DELETE /vehicles/:id) та створення маршрутів (POST /routes). Доступ до захищених маршрутів здійснюється лише після передачі JWT-токена.
У серверній частині використовуються наступні технології: Node.js, Express.js, MongoDB з Mongoose, бібліотека jsonwebtoken для роботи з токенами авторизації, bcrypt для шифрування паролів, dotenv для керування змінними середовища та cors для кросдоменного доступу.
Для підтримки багатомовності реалізована базова інтерналізація — повідомлення можуть бути локалізовані у JSON-файлах відповідно до мови, вказаної в заголовку Accept-Language HTTP-запиту.
Серверна логіка побудована на модульній структурі: файл app.js відповідає за ініціалізацію сервера та підключення маршрутів, бази даних, middleware. Контролери реалізують функціональність для роботи з користувачами, транспортними засобами, маршрутами. Система перевіряє автентичність кожного запиту, застосовуючи middleware для обмеження доступу за ролями.
Функціональне тестування серверної частини проводилось за допомогою Swagger UI та Postman. Було протестовано логін, реєстрацію, обмеження доступу для ролей, додавання та видалення транспортних засобів, обробку помилок, перевірку заголовків авторизації та загальну відповідність API специфікації.
ER-діаграма системи TrackWay відображає логічну структуру бази даних, яка включає сутності users, vehicles та routes. Кожна з них містить ключові атрибути: користувач — ім’я, пароль, роль; транспортний засіб — марку, модель, рік, VIN-код; маршрут — початкову і кінцеву позиції, прив’язку до авто.
UML-діаграма прецедентів демонструє типові сценарії взаємодії користувачів з системою. Диспетчер має повний доступ до всіх функцій: авторизація, керування автопарком, призначення маршрутів. Водій може авторизуватись та переглядати призначені йому транспортні засоби.
Діаграма розгортання описує компоненти, які беруть участь у роботі системи: веб-клієнт на React, мобільний додаток на Kotlin, сервер на Node.js, база даних MongoDB. Усі компоненти взаємодіють через HTTP-протоколи.
Діаграма діяльності відображає кроки користувача під час додавання транспортного засобу: введення даних, перевірка прав доступу, надсилання запиту, обробка відповіді та оновлення списку в інтерфейсі.
Серверні компоненти включають:
-	UserController — обробка реєстрації, авторизації, видалення користувача
-	VehicleController — логіка створення, перегляду та видалення транспортних засобів
-	RouteController — створення маршрутів
-	AuthMiddleware — перевірка JWT-токенів, контроль доступу за роллю

Висновки:
У результаті виконання лабораторної роботи було створено програмну систему TrackWay з реалізацією клієнтської частини, серверного API та структури бази даних. Система підтримує облік транспортних засобів, рольову авторизацію і відповідає сучасним вимогам архітектури програмного забезпечення.

 
ДОДАТОК А
Посилання на відеозапис доповіді

Відеозапис доповіді на YouTube: https://youtu.be/prwsijsgE2A
Нижче наведено хронологічний опис доповіді.
00:00 – Вітання.
0:20 – Функція реєстрації користувача.
0:35 – Функція авторизації користувача.
01:07 – Функція видалення користувача.
01:20 – Функція показу автомобілів. 
01:30 – Функція видалення автомобілів. 
01:42 – Функції додавання автомобілів.
01:43 – Завершення.




ДОДАТОК Б

 
Рисунок Б.1 — ER-діаграма даних
 
Рисунок Б.2 — Структура бази даних
 
Рисунок Б.3 — UML-діаграма прецедентів
 
Рисунок Б.4 — діаграма розгортання
 
Рисунок Б.5 — діаграма діяльності




ДОДАТОК В
Програмий код


В.1 Модель користувача
1 const mongoose = require('mongoose');
 2
 3 const UserSchema = new mongoose.Schema({
 4   username: String,
 5   password: String,
 6   role: { type: String, enum: ['admin', 'driver'], default: 'driver' },
 7 });
 8
 9 module.exports = mongoose.model('User', UserSchema);



В.2 Модель маршруту
1 const mongoose = require('mongoose');
 2
 3 const RouteSchema = new mongoose.Schema({
 4   pos_start: String,
 5   pos_finish: String,
 6   vehicle_id: { type: mongoose.Schema.Types.ObjectId, ref: 'Vehicle' },
 7 });
 8
 9 module.exports = mongoose.model('Route', RouteSchema);



В.3 Модель транспортного засобу
1 const mongoose = require('mongoose');
 2
 3 const VehicleSchema = new mongoose.Schema({
 4   make: String,
 5   model: String,
 6   year: Number,
 7   vin: String,
 8   front_iot: String,
 9   back_iot: String,
10 });
11
12 module.exports = mongoose.model('Vehicle', VehicleSchema);
