МІНЕСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ



Кафедра «Програмна інженерія»




ЗВІТ
з практичної роботи №1
з дисципліни «Архітектура програмного забезпечення»



Виконав:
Ст. гр. ПЗПІ-22-8
Тюлєнєв Станіслав
	Перевірив:
ст. викладач каф. ПІ
Сокорчук І. П.





Харків 2025
 
1 ІСТОРІЯ ЗМІН
Таблиця 1 – Історія змін
№	Дата	Версія звіту	Опис змін та виправлень
1	03.03.2025	0.1	Створено розділ «Завдання»
2	05.03.2025	0.2	Додано опис виконаної роботи
3	07.03.2025	1.0	Оформлено висновки, додано додатки

2 ЗАВДАННЯ
Метою роботи є дослідження породжуючого патерну проектування Builder, його принципів, переваг, недоліків та практичного застосування. Завдання полягає у розробці прикладу використання патерну Builder для створення об’єкта з багатьма параметрами, а також у підготовці доповіді й презентації з даної теми.

3 ОПИС ВИКОНАНОЇ РОБОТИ
У процесі виконання роботи було досліджено патерн проєктування Builder (Будівельник).

3.1 Суть патерну Builder
Builder — це породжуючий патерн проєктування, що дозволяє створювати складні об’єкти поетапно. Головна ідея полягає у відокремленні процесу побудови об’єкта від його представлення, що дозволяє створювати різні варіанти об’єктів, використовуючи один і той самий процес будівництва.

3.2 Структура патерну
Структура патерну Builder складається з таких компонентів:
•	Builder — інтерфейс, який визначає стандартний набір кроків для поетапної конфігурації складного об’єкта.
•	ConcreteBuilder — реалізує інтерфейс Builder і містить конкретну логіку створення певного типу об’єкта.
•	Director — керує процесом побудови, визначає послідовність виклику методів Builder.
•	Product — складний об’єкт, який створюється за допомогою Builder.

3.3 Принцип роботи патерну
Процес створення складного об’єкта здійснюється поетапно за допомогою Builder, кожен крок якого відповідає за налаштування певного параметра об’єкта. Director визначає, у якій послідовності викликати ці кроки, щоб отримати бажаний результат. Таким чином, логіка побудови ізольована від самого об’єкта, що спрощує створення різних представлень.

3.4 Застосовність
Патерн Builder доцільно використовувати в таких випадках:
•	Коли об’єкт має складну структуру або велику кількість параметрів.
•	Коли потрібно створювати різні конфігурації або представлення об’єкта.
•	Коли потрібно ізолювати логіку створення об’єкта від його використання.

3.5 Переваги та недоліки
Переваги:
•	Дозволяє створювати складні об’єкти поетапно.
•	Забезпечує незалежність коду, що створює об’єкти, від коду їх представлення.
•	Полегшує створення різних варіацій об’єктів.
•	Покращує читабельність і підтримку коду.
Недоліки:
•	Збільшує кількість класів у проєкті.
•	Ускладнює код для простих об’єктів, де Builder не потрібен.

3.6 Інтерфейс та Конкретні Реалізації
Інтерфейс Builder визначає стандартизований набір методів для поетапної конфігурації об'єкта "Автомобіль". Кожен метод відповідає за налаштування певного атрибута, наприклад, кольору, двигуна, коліс чи GPS.
ConcreteBuilder – це клас, який реалізує інтерфейс Builder. Він надає конкретну логіку для створення певного типу автомобіля, використовуючи задані методи. Наприклад, може бути ConcreteBuilder для "Спортивного автомобіля" або "Сімейного автомобіля".


4 ВИСНОВКИ
Патерн Builder є ефективним інструментом для створення складних об’єктів із багатьма параметрами, дозволяє відокремити процес побудови від представлення, спрощує підтримку та розширення коду. Builder робить програмний код більш гнучким та зрозумілим, проте призводить до збільшення кількості класів, що потрібно враховувати при проєктуванні системи.




ДОДАТОК А

Посилання на відеозапис доповіді та хронологічний опис.
Відеозапис доповіді на YouTube: 

Хронологічний опис:
00:00 - Титульний слайд
00:00 - Що таке патерн Builder?
00:00 - Компоненти патерну Builder
00:00 - Переваги та недоліки патерну Builder
00:00 - Приклад коду: Клас "Автомобіль"
00:00 - Інтерфейс та Конкретні Реалізації
00:00 - Клас Director
00:00 - Реальний приклад: Створення HTML
00:00 - Коли використовувати патерн Builder?
00:00 – Висновки



ДОДАТОК Б

Слайди презентації доповіді

 
Рис. Б.1 – Титульний слайд
 
Рис. Б.2 – Що таке патерн Builder?
 
Рис. Б.3 – Компоненти патерну Builder
 
Рис. Б.4 – Переваги та недоліки патерну Builder
 
Рис. Б.5 – Приклад коду: Клас "Автомобіль"
 
Рис. Б.6 – Інтерфейс та Конкретні Реалізації
 
Рис. Б.7 – Клас Director
 
Рис. Б.8 – Реальний приклад: Створення HTML
 
Рис. Б.9 – Коли використовувати патерн Builder?
 
Рис. Б.10 – Висновки




ДОДАТОК В
Програмний код
1   interface CarBuilder {  
2     setColor(color: string): void;  
3     setEngine(engine: Двигун): void;  
4     setWheels(wheels: Колесо[]): void;  
5     setGPS(gps: GPS): void;  
6     getResult(): Автомобіль;  
7   }  


1   class Автомобіль  {  
2     колір : string;  
3     двигун : Двигун ;  
4     колеса: Колесо[];  
5     GPS: GPS;  
6     constructor() {  
7       this. колір = "";  
8       this. двигун = new Двигун();  
9       this. колеса = [];  
10      this.GPS = new GPS();  
11   }  
12 }  
