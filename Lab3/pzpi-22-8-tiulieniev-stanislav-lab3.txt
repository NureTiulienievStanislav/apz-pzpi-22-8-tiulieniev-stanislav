Міністерство освіти та науки України
Харківський національний університет
радіоелектроніки


Кафедра ПІ



Звіт
З лабораторної роботи 3
з дисципліни «Розробка програмної архітектури, створення та відлагодження програмного коду веб-клієнта програмної системи»



Виконав:	Перевірив:
ст. гр. ПЗПІ-22-8	ст. викладач Сокорчук І.П.
Тюлєнєв С.О.	 



Харків 2025
 
Мета роботи:
Потрібно розробити програмне забезпечення для IoT або SmartDevice пристрою, реалізованого на базі будь-якої поширеної на сьогодні платформи, придатної для реалізації вбудованих систем (Embedded System). 

Історія змін:
№	Дата	Версія	Опис змін	Автор
1	26.05.2025	0.1	Створено розділ «Опис виконаної роботи»	Тюлєнєв Станіслав
2	26.05.2025	0.1	Створено розділ «Висновки»	Тюлєнєв Станіслав
3	26.05.2025	0.1	Створено додатки	Тюлєнєв Станіслав

Опис виконаної роботи:
У реалізації використовувалась концепція “сенсорна симуляція → логіка перевірки → передача даних”. На рівні пристрою (умовна платформа — Android, емулятор або Node.js) функціонує цикл, який з певною періодичністю генерує псевдовипадкові значення у допустимому діапазоні від 0 до 10 метрів. Дані формуються у вигляді JSON-об’єкта та надсилаються на MQTT-топік trackway/telemetry, де їх приймає бекенд і зберігає у базі даних. Для забезпечення надійної роботи була реалізована обробка даних — перевірка на коректність (наприклад, перевищення діапазону), округлення до двох десяткових знаків та ігнорування помилкових значень. 
Функціональне тестування проводилось як через консольні клієнти MQTT, так і через бекенд-сервер, що фіксував отримані значення. Інтерфейс дозволяв перевірити, що дані оновлюються в режимі реального часу. Уся логіка була реалізована на JavaScript, що дозволило швидко протестувати та імітувати поведінку IoT-пристрою без необхідності фізичного обладнання. Таким чином, було досягнуто повної симуляції роботи IoT-рівня системи з його інтеграцією у загальну архітектуру TrackWay.
Серверна частина побудована за допомогою фреймворку Express.js. Вона організована модульно: контролери обробляють логіку, маршрути відповідають за API-взаємодію, а middleware реалізують автентифікацію і перевірку ролей. Дані зберігаються у MongoDB, доступ до яких здійснюється через ORM Mongoose. Передача даних від IoT-емулятора здійснюється через MQTT-брокер.
Для обробки користувацьких даних у системі використовується генерація псевдовипадкових значень для емуляції даних датчиків. Дистанція спереду та ззаду автомобіля моделюється з допомогою Math.random() і округлюється до двох десяткових знаків. Для захисту системи від помилкових значень передбачено фільтрацію: значення, що виходять за межі допустимого діапазону (0–10 м), ігноруються.
Frontend реалізовано як SPA на React, з авторизацією, формою додавання ТЗ та відображенням IoT-даних. Мобільний додаток на Kotlin дозволяє водіям бачити свої авто, маршрути та сповіщення.

Висновки:
У результаті виконання лабораторної роботи було реалізовано повноцінну систему TrackWay з клієнтською, серверною та IoT-інфраструктурою. Система протестована, підтримує облік ТЗ, маршрути, телеметрію та рольовий доступ. TrackWay демонструє реальну інтеграцію IoT з веб і мобільними технологіями для автоматизації керування автопарком.
 
ДОДАТОК А
Посилання на відеозапис доповіді

Відеозапис доповіді на YouTube: https://youtu.be/ICI_Etq9BbA
Нижче наведено хронологічний опис доповіді.
00:00 – Вітання.
0:12 – Вікно входу.
0:21 – Демонстрація розділу функцій по ролям.
01:13 – Демонстрація функцій для ролі адмін.
02:35 – Завершення.



ДОДАТОК Б

 
Рисунок Б.1 — Діаграма взаємодії
 
Рисунок Б.2 — Діаграма компонентів
 
Рисунок Б.3 — UML-діаграма прецедентів
 
Рисунок Б.4 — діаграма діяльності




ДОДАТОК В
Програмий код

В.1 Обробка та оновлення IoT-даних з MQTT
1 const mqtt = require('mqtt');
 2 const Vehicle = require('./models/Vehicle');
 3
 4 const client = mqtt.connect('mqtt://localhost:1883');
 5
 6 client.on('connect', () => {
 7   client.subscribe('trackway/telemetry');
 8 });
 9
10 client.on('message', async (topic, message) => {
11   try {
12     const { vin, front, rear } = JSON.parse(message.toString());
13
14     if (!vin || isNaN(front) || isNaN(rear)) return;
15
16     await Vehicle.findOneAndUpdate(
17       { vin },
18       { front_iot: front.toFixed(2), back_iot: rear.toFixed(2) }
19     );
20
21     console.log(`Оновлено: ${vin}`);
22   } catch (error) {
23     console.error('MQTT помилка:', error.message);
24   }
25 });



В.2 Збереження телеметрії
1 const mongoose = require('mongoose');
 2
 3 const SensorDataSchema = new mongoose.Schema({
 4   vin: String,
 5   front: Number,
 6   rear: Number,
 7   timestamp: { type: Date, default: Date.now },
 8 });
 9
10 module.exports = mongoose.model('SensorData', SensorDataSchema);

