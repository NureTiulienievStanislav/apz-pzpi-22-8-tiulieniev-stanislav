Міністерство освіти та науки України
Харківський національний університет
радіоелектроніки


Кафедра ПІ



Звіт
З лабораторної роботи 3
з дисципліни «Розробка програмної архітектури, створення та відлагодження програмного коду веб-клієнта програмної системи»



Виконав:	Перевірив:
ст. гр. ПЗПІ-22-8	ст. викладач Сокорчук І.П.
Тюлєнєв С.О.	 



Харків 2025
 
Мета роботи:
Потрібно розробити програмне забезпечення для IoT або SmartDevice пристрою, реалізованого на базі будь-якої поширеної на сьогодні платформи, придатної для реалізації вбудованих систем (Embedded System). 

Історія змін:
№	Дата	Версія	Опис змін	Автор
1	26.05.2025	0.1	Створено розділ «Опис виконаної роботи»	Тюлєнєв Станіслав
2	26.05.2025	0.1	Створено розділ «Висновки»	Тюлєнєв Станіслав
3	26.05.2025	0.1	Створено додатки	Тюлєнєв Станіслав

Опис виконаної роботи:
У реалізації використовувалась концепція “сенсорна симуляція → логіка перевірки → передача даних”. На рівні пристрою (умовна платформа — Android, емулятор або Node.js) функціонує цикл, який з певною періодичністю генерує псевдовипадкові значення у допустимому діапазоні від 0 до 10 метрів. Дані формуються у вигляді JSON-об’єкта та надсилаються на MQTT-топік trackway/telemetry, де їх приймає бекенд і зберігає у базі даних. Для забезпечення надійної роботи була реалізована обробка даних — перевірка на коректність (наприклад, перевищення діапазону), округлення до двох десяткових знаків та ігнорування помилкових значень. 
Функціональне тестування проводилось як через консольні клієнти MQTT, так і через бекенд-сервер, що фіксував отримані значення. Інтерфейс дозволяв перевірити, що дані оновлюються в режимі реального часу. Уся логіка була реалізована на JavaScript, що дозволило швидко протестувати та імітувати поведінку IoT-пристрою без необхідності фізичного обладнання. Таким чином, було досягнуто повної симуляції роботи IoT-рівня системи з його інтеграцією у загальну архітектуру TrackWay.
Серверна частина побудована за допомогою фреймворку Express.js. Вона організована модульно: контролери обробляють логіку, маршрути відповідають за API-взаємодію, а middleware реалізують автентифікацію і перевірку ролей. Дані зберігаються у MongoDB, доступ до яких здійснюється через ORM Mongoose. Передача даних від IoT-емулятора здійснюється через MQTT-брокер.
Для обробки користувацьких даних у системі використовується генерація псевдовипадкових значень для емуляції даних датчиків. Дистанція спереду та ззаду автомобіля моделюється з допомогою Math.random() і округлюється до двох десяткових знаків. Для захисту системи від помилкових значень передбачено фільтрацію: значення, що виходять за межі допустимого діапазону (0–10 м), ігноруються.
Frontend реалізовано як SPA на React, з авторизацією, формою додавання ТЗ та відображенням IoT-даних. Мобільний додаток на Kotlin дозволяє водіям бачити свої авто, маршрути та сповіщення.

Висновки:
У результаті виконання лабораторної роботи було реалізовано повноцінну систему TrackWay з клієнтською, серверною та IoT-інфраструктурою. Система протестована, підтримує облік ТЗ, маршрути, телеметрію та рольовий доступ. TrackWay демонструє реальну інтеграцію IoT з веб і мобільними технологіями для автоматизації керування автопарком.
 
ДОДАТОК А
Посилання на відеозапис доповіді

Відеозапис доповіді на YouTube: https://youtu.be/ICI_Etq9BbA
Нижче наведено хронологічний опис доповіді.
00:00 – Вітання.
0:12 – Вікно входу.
0:21 – Демонстрація розділу функцій по ролям.
01:13 – Демонстрація функцій для ролі адмін.
02:35 – Завершення.



ДОДАТОК Б

 
Рисунок Б.1 — Діаграма взаємодії
 
Рисунок Б.2 — Діаграма компонентів
 
Рисунок Б.3 — UML-діаграма прецедентів
 
Рисунок Б.4 — діаграма діяльності




ДОДАТОК В
Програмий код

В.1 Програмна логіка IoT-модуля
1 const mqtt = require('mqtt')
 2 const readline = require('readline')
 3 const rl = readline.createInterface({
 4   input: process.stdin,
 5   output: process.stdout
 6 })
 7 let config = {
 8   vin: '',
 9   interval: 3000,
10   brokerUrl: 'mqtt://localhost:1883',
11   topic: 'trackway/telemetry'
12 }
13 function askForConfig() {
14   rl.question('Введіть VIN автомобіля: ', (vin) => {
15     config.vin = vin.trim()
16     rl.question('Інтервал оновлення (мс): ', (interval) => {
17       const parsed = parseInt(interval)
18       config.interval = isNaN(parsed) ? 3000 : parsed
19       rl.close()
20       startTransmission()
21     })
22   })
23 }
24 function generateDistance() {
25   const value = (Math.random() * 10).toFixed(2)
26   return parseFloat(value)
27 }
28 function validate(value) {
29   return !isNaN(value) && value >= 0 && value <= 10
30 }
31 function startTransmission() {
32   const client = mqtt.connect(config.brokerUrl)
33   client.on('connect', () => {
34     console.log(`Підключено до брокера ${config.brokerUrl}`)
35     console.log(`Починається передача кожні ${config.interval} мс\n`)
36
37     setInterval(() => {
38       const front = generateDistance()
39       const rear = generateDistance()
40       if (!validate(front) || !validate(rear)) {
41         console.warn('Дані не пройшли перевірку, пропущено')
42         return
43       }
44       const message = JSON.stringify({
45         vin: config.vin,
46         front,
47         rear
48       })
49       client.publish(config.topic, message, () => {
50         console.log(`Дані надіслано: ${message}`)
51       })
52     }, config.interval)
53   })
54   client.on('error', (err) => {
55     console.error('Помилка MQTT:', err.message)
56   })
57 }
58 askForConfig()

