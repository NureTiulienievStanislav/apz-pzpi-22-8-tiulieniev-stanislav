Міністерство освіти та науки України
Харківський національний університет
радіоелектроніки


Кафедра ПІ



Звіт
З лабораторної роботи 5
з дисципліни «Розробка програмної архітектури, створення та відлагодження програмного коду програмного
застосунку мобільного пристрою для програмної
системи»




Виконав:	Перевірив:
ст. гр. ПЗПІ-22-8	ст. викладач Сокорчук І.П.
Тюлєнєв С.О.	 



Харків 2025
 
Мета роботи:
Потрібно розробити мобільний програмний застосунок для будь-якої поширеної на сьогодні мобільної платформи. 

Історія змін:
№	Дата	Версія	Опис змін	Автор
1	02.06.2025	0.1	Створено розділ «Опис виконаної роботи»	Тюлєнєв Станіслав
2	02.06.2025	0.1	Створено розділ «Висновки»	Тюлєнєв Станіслав
3	02.06.2025	0.1	Створено додатки	Тюлєнєв Станіслав


Опис виконаної роботи:
Мобільний застосунок є повноцінним клієнтським модулем до програмної системи управління автопарком та реалізує ключові функції, зокрема авторизацію, реєстрацію, перегляд транспортних засобів, керування маршрутами та захист доступу через JWT.
Архітектура мобільного застосунку побудована за принципами MVVM (Model–View–ViewModel), що дозволяє чітко розмежувати логіку інтерфейсу користувача, бізнес-логіку та доступ до даних. У проєкті використано розділення на шари: UI-компоненти (LoginScreen.kt, RegisterScreen.kt, DashboardScreen.kt), ViewModel (AuthViewModel.kt, VehicleViewModel.kt), сховище (TrackWayRepository.kt), інтерфейс API (TrackWayApi.kt) та конфігурацію залежностей (AppContainer.kt, DefaultAppContainer.kt). Вхідною точкою застосунку є MainActivity.kt, яка ініціалізує навігацію та відображення інтерфейсу.
Для реалізації застосунку були використані такі основні технології: Kotlin, Jetpack Compose для UI, Navigation Compose для маршрутизації між екранами, Retrofit для HTTP-запитів, Gson для парсингу JSON, DataStore для збереження токена та ролі користувача, Hilt-like DI через AppContainer, Coroutines для асинхронної роботи, та Material Design для візуального оформлення. Весь інтерфейс реалізовано декларативно за допомогою Compose, що забезпечує швидкість розробки та високу продуктивність.
Бізнес-логіка реалізована у відповідних ViewModel: AuthViewModel відповідає за обробку логіну, реєстрації, перевірку стану користувача, збереження токена; VehicleViewModel відповідає за завантаження транспортних засобів із сервера, обробку помилок, оновлення UI. Репозиторій TrackWayRepository забезпечує зв’язок між ViewModel та API, інкапсулюючи логіку обробки відповідей сервера, кешування токена, фільтрації тощо.
Захист даних у застосунку реалізовано через механізм збереження JWT-токена в Encrypted DataStore. Усі запити до захищених API автоматично супроводжуються токеном у заголовку Authorization. При спробі доступу без токена користувач перенаправляється на екран логіну. Крім того, роль користувача (admin або driver) також зберігається та використовується для обмеження дій у UI.
Застосунок взаємодіє з серверною частиною програмної системи через HTTP-запити, реалізовані в TrackWayApi.kt. Сервер реалізує REST API, що надає доступ до ресурсів: /login, /register, /vehicles, /routes. Дані отримуються через Retrofit, обробляються репозиторієм і передаються у ViewModel для відображення в інтерфейсі. Таким чином, мобільний застосунок функціонує як клієнт, який повноцінно працює з усіма можливостями бекенду.
Підтримка інтерналізації реалізована за допомогою ресурсних файлів strings.xml у стандартному Android-підході. Хоча базова реалізація наразі доступна лише українською мовою, структура проєкту дозволяє легко додати інші мови через values-en/strings.xml, values-ru/strings.xml тощо. Усі статичні тексти винесені в ресурси, що забезпечує гнучкість локалізації.
Функціональність для налаштування системи реалізована через збереження конфігурації токена, автоматичну авторизацію при наступному запуску, а також обмеження доступу до дій залежно від ролі користувача. Адміністратор може додавати маршрути, переглядати повний список ТЗ, а водій — лише переглядати призначені авто. Це дозволяє адаптувати інтерфейс до типу користувача і забезпечити належне адміністрування з рівня мобільного клієнта.

Висновки:
У результаті виконання лабораторної роботи було реалізовано повноцінну систему TrackWay з клієнтською, серверною та IoT-інфраструктурою. Система протестована, підтримує облік ТЗ, маршрути, телеметрію та рольовий доступ. TrackWay демонструє реальну інтеграцію IoT з веб і мобільними технологіями для автоматизації керування автопарком.




ДОДАТОК А
Посилання на відеозапис доповіді

Відеозапис доповіді на YouTube: https://youtu.be/OmzWLdCjhzw
Нижче наведено хронологічний опис доповіді.
00:00 – Вітання.
0:12 – Опис програмної системи.
0:30 – Інструкція щодо завантаження.
02:20 – Демонстрація IoT.
02:50 – Завершення.




ДОДАТОК Б

Загальний огляд:
TrackWay — це багаторівнева програмна система для керування автопарком із підтримкою веб-інтерфейсу, мобільного додатку та IoT-модуля, який передає телеметричні дані. Система реалізує CRUD-функціональність для транспортних засобів, маршрутизацію, авторизацію через JWT і розмежування доступу за ролями (admin / driver).
Використані технології:
•	Backend (сервер): Node.js, Express.js, MongoDB, JWT, Mongoose
•	Frontend (web): React.js, TailwindCSS, Axios
•	Mobile (Android): Kotlin, Jetpack Compose, Retrofit, DataStore
•	IoT: Node.js + MQTT (HiveMQ), емуляція пристрою
•	База даних: MongoDB (через mongoose)
•	Інтерфейс API: RESTful
•	Формат обміну даними: JSON
Серверна частина:
-	Платформа: Node.js (v18+)
-	Фреймворк: Express.js
-	Авторизація: JSON Web Token (jsonwebtoken)
-	ORM: Mongoose
-	Модулі:
•	authController.js — логін/реєстрація
•	vehicleController.js — CRUD для ТЗ
•	routeController.js — маршрути
•	authMiddleware.js — валідація токенів та перевірка ролей
-	Захищені маршрути:
•	GET /users — тільки для admin
•	POST /vehicles — тільки з валідним токеном
•	POST /routes — доступно admin
Веб-інтерфейс
-	Фреймворк: React.js (SPA)
-	Стили: TailwindCSS
-	HTTP-запити: Axios
-	Логіка:
•	Форма входу / реєстрації
•	Перегляд/видалення ТЗ
•	Додавання ТЗ (тільки admin)
-	Збереження токена: localStorage
-	Авторизація: токен надсилається в Authorization заголовку
Мобільний додаток
-	Мова: Kotlin
-	UI: Jetpack Compose
-	Бібліотеки:
•	Retrofit (взаємодія з API)
•	Gson (парсинг JSON)
•	DataStore (збереження токена, ролі)
-	Архітектура: MVVM
-	Компоненти:
•	LoginScreen.kt, RegisterScreen.kt, DashboardScreen.kt
•	AuthViewModel.kt, VehicleViewModel.kt
•	TrackWayRepository.kt (API та логіка доступу)
-	Функціональність:
•	Авторизація та реєстрація
•	Перегляд ТЗ
•	Захист доступу через роль
IoT-модуль
-	Реалізація: Node.js + mqtt.js
-	MQTT-брокер: HiveMQ (mqtt://broker.hivemq.com)
-	Топік: trackway/sensors/#
-	Формат повідомлення:
{
  "vehicleId": "663f78d",
  "frontDistance": 4.32,
  "rearDistance": 3.12
}
-	Функція: клієнт-емулятор надсилає дані кожні 3–5 секунд
-	Обробка на сервері: дані зберігаються в колекцію SensorData
Налаштування серверної частини:
1.	Перейти до папки server/
2.	Створити .env з параметрами:
PORT=3000
JWT_SECRET=your_jwt_secret
MONGO_URI=mongodb://localhost:27017/trackway
3.	Встановити залежності:
npm install

Налаштування MongoDB:
-	Встановити MongoDB
-	Запустити локальний сервер: mongod
-	Створити базу trackway вручну або при першому запуску
 Налаштування клієнтів:
Веб-інтерфейс (React)
1.	Перейти в frontend/
2.	Встановити:
npm install
3.	Запуск:
npm run dev
4.	Веб доступний за адресою: http://localhost:5173
Мобільний застосунок (Android)
1.	Відкрити проєкт у Android Studio
2.	Встановити емулятор або підключити реальний пристрій
3.	Запустити MainActivity.kt
4.	У файлі TrackWayApi.kt замінити базову URL на свій IP:
private const val BASE_URL = "http://192.168.X.X:3000/"
IoT емулятор
1.	Перейти в iot/ (або client.js)
2.	Встановити:
npm install mqtt
3.	Запуск:
node client.js
Запуск системи:
1.	MongoDB: mongod
2.	Сервер: node app.js (у server/)
3.	IoT: node client.js (окреме вікно)
4.	Веб: npm run dev (React)
5.	Мобільний застосунок: з Android Studio
