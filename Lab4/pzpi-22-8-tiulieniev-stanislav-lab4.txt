Міністерство освіти та науки України
Харківський національний університет
радіоелектроніки


Кафедра ПІ



Звіт
З лабораторної роботи 4
з дисципліни «Розробка програмної архітектури та створення і відлагодження програмного коду програмного застосунку мобільного пристрою для програмної системи»




Виконав:	Перевірив:
ст. гр. ПЗПІ-22-8	ст. викладач Сокорчук І.П.
Тюлєнєв С.О.	 


Харків 2025




Мета роботи:
Потрібно розробити клієнтську / front-end частину програмної систем. Історія змін:
№	Дата	Версія	Опис змін	Автор
1	31.05.2025	0.1	Створено розділ «Опис виконаної роботи»	Тюлєнєв Станіслав
2	31.05.2025	0.1	Створено розділ «Висновки»	Тюлєнєв Станіслав
3	31.05.2025	0.1	Створено додатки	Тюлєнєв Станіслав

Опис виконаної роботи:
У рамках четвертої лабораторної роботи було реалізовано веб-частину програмної системи TrackWay, що забезпечує графічний інтерфейс для користувачів із ролями “admin” та “driver”. Веб-клієнт реалізовано як односторінковий застосунок (SPA), побудований на бібліотеці React. Програмна архітектура веб-частини заснована на компонентному підході: кожна частина інтерфейсу (форма входу, список транспортних засобів, форма додавання, кнопки дій) реалізована як окремий функціональний компонент. Структура проекту дозволяє легко масштабувати або переорганізовувати інтерфейс без порушення загальної логіки системи.
Веб-інтерфейс побудовано з використанням наступних технологій: React (JavaScript), TailwindCSS для стилізації, axios для HTTP-запитів, React Router для навігації, а також LocalStorage для збереження токена користувача. Axios використовується для взаємодії з REST API серверної частини, забезпечуючи повноцінну комунікацію між клієнтом і бекендом. TailwindCSS надає сучасний та гнучкий дизайн без складної конфігурації. React забезпечує швидке оновлення інтерфейсу завдяки віртуальному DOM та декларативному підходу.
Веб-клієнт реалізує основну бізнес-логіку доступну для користувачів. Серед ключових функцій — реєстрація, авторизація, перегляд списку транспортних засобів, додавання нового авто, видалення, а також вихід із профілю. Для ролі admin доступні всі операції, включаючи створення маршрутів та перегляд усіх ТЗ. Користувач із роллю driver має обмежений доступ — тільки до перегляду даних. Уся бізнес-логіка захищена перевіркою ролі: при отриманні токена система визначає, які дії доступні користувачеві.
Захист даних у веб-частині реалізовано на рівні авторизації: усі запити, що стосуються ресурсів (отримання або зміна ТЗ), відправляються лише з JWT-токеном у заголовку Authorization: Bearer <token>. Токен зберігається у LocalStorage, а при кожному оновленні сторінки автоматично перевіряється його наявність. У разі відсутності або недійсності — користувач перенаправляється на сторінку входу. Окрім того, валідація форм захищає від спроб відправити некоректні або порожні дані.
Веб-частина активно взаємодіє з іншими компонентами системи — насамперед з бекенд-сервером, який обробляє всі запити через REST API. Отримані дані (списки ТЗ, підтвердження операцій) відображаються в інтерфейсі. З іншого боку, веб-клієнт лише відображає те, що оброблено сервером, і не зберігає важливих даних локально.
Підтримка інтерналізації реалізована шляхом створення словників для різних мов (наприклад, uk.json, en.json), які містять ключові текстові повідомлення інтерфейсу. У коді всі написи замінено на ключі, які динамічно підставляються відповідно до вибраної мови користувача. Реалізація виконана за допомогою бібліотеки i18next або вручну через контекст і конфігурацію JSON-файлів. На поточному етапі підтримуються дві мови — українська та англійська, з можливістю додати нові.
Функціональність для налаштування та адміністрування системи в інтерфейсі включає в себе можливість створення нових користувачів через реєстрацію, перегляд і контроль транспортних засобів, а також видалення записів. Всі дії підтверджуються інтерактивними повідомленнями, з використанням модальних вікон (наприклад, підтвердження перед видаленням). Також реалізована кнопка “Вийти”, що очищує токен та повертає користувача на стартовий екран. Таким чином, веб-інтерфейс повністю виконує функції адміністративної панелі для диспетчера автопарку, забезпечуючи доступ, захист та керування основними об’єктами системи.

Висновки:
У результаті виконання лабораторної роботи №4 було розроблено сучасну веб-частину програмної системи TrackWay з використанням технологій React, TailwindCSS та REST API. Система підтримує авторизацію з JWT, рольовий доступ, CRUD-операції над транспортними засобами, а також базову інтерналізацію з підтримкою локалізації українською та англійською мовами. Інтерфейс побудований на основі компонентної архітектури, що забезпечує масштабованість та зручність у підтримці коду. Всі бізнес-процеси реалізовані із захистом даних, а взаємодія з серверною частиною здійснюється безпосередньо через HTTP-запити.
 
ДОДАТОК А
Посилання на відеозапис доповіді

Відеозапис доповіді на YouTube: https://youtu.be/ICI_Etq9BbA
Нижче наведено хронологічний опис доповіді.
00:00 – Вітання.
0:12 – Вікно входу.
0:21 – Демонстрація розділу функцій по ролям.
01:13 – Демонстрація функцій для ролі адмін.
02:35 – Завершення.





ДОДАТОК Б

 
Рисунок Б.1 — Діаграма взаємодії
 
Рисунок Б.2 — Діаграма компонентів
 
Рисунок Б.3 — UML-діаграма прецедентів
 
Рисунок Б.4 — діаграма діяльності




ДОДАТОК В
Програмий код

В.1 Вхід користувача та збереження токена
GitHub репозиторій: https://github.com/NureTiulienievStanislav/apz-pzpi-22-8-tiulieniev-stanislav/tree/main/Lab4/pzpi-22-8-tiulieniev-stanislav-lab4/app/src/main/java/com/trackway/app/data/repository

1 suspend fun login(username: String, password: String): Result<AuthResponse> {
 2     return try {
 3         val response = api.login(LoginRequest(username, password))
 4         if (response.isSuccessful) {
 5             response.body()?.let { authResponse ->
 6                 saveToken(authResponse.token)
 7                 saveUserRole(authResponse.user.role)
 8                 Result.success(authResponse)
 9             } ?: Result.failure(Exception("Empty response body"))
10         } else {
11             Result.failure(Exception("Login failed: ${response.code()}"))
12         }
13     } catch (e: Exception) {
14         Result.failure(e)
15     }
16 }


В.2 Отримання списку транспортних засобів
GitHub репозиторій: https://github.com/NureTiulienievStanislav/apz-pzpi-22-8-tiulieniev-stanislav/tree/main/Lab4/pzpi-22-8-tiulieniev-stanislav-lab4/app/src/main/java/com/trackway/app/data/repository

1 suspend fun getVehicles(): Result<List<Vehicle>> {
 2     return try {
 3         val response = api.getVehicles()
 4         if (response.isSuccessful) {
 5             response.body()?.let { vehicles ->
 6                 Result.success(vehicles)
 7             } ?: Result.failure(Exception("Empty response body"))
 8         } else {
 9             Result.failure(Exception("Failed to get vehicles: ${response.code()}"))
10         }
11     } catch (e: Exception) {
12         Result.failure(e)
13     }
14 }


В.3 Збереження токена в DataStore
GitHub репозиторій: https://github.com/NureTiulienievStanislav/apz-pzpi-22-8-tiulieniev-stanislav/tree/main/Lab4/pzpi-22-8-tiulieniev-stanislav-lab4/app/src/main/java/com/trackway/app/data/repository

1 private suspend fun saveToken(token: String) {
 2     context.dataStore.edit { preferences ->
 3         preferences[TOKEN_KEY] = token
 4     }
 5 }
 6 fun getToken(): Flow<String?> {
 7     return context.dataStore.data.map { preferences ->
 8         preferences[TOKEN_KEY]
 9     }
10 }
